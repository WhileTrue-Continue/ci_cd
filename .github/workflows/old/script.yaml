name: Linux Builder

on:
  repository_dispatch:
    types: [deploy_linux]
  workflow_call:

env:
  GODOT_SDK_LINUX_X86_64: /root/x86_64-godot-linux-gnu_sdk-buildroot
  GODOT_SDK_LINUX_X86_32: /root/i686-godot-linux-gnu_sdk-buildroot
  GODOT_SDK_LINUX_ARM64: /root/aarch64-godot-linux-gnu_sdk-buildroot
  GODOT_SDK_LINUX_ARM32: /root/arm-godot-linux-gnueabihf_sdk-buildroot
  SCONSFLAGS: verbose=yes warnings=no progress=no
  BASE_PATH: $PATH
  NUM_CORES: 4
  TERM: xterm

jobs:
  setup-and-build:
    runs-on: ubuntu-latest
    container:
      image: bioblaze/blazium-linux:latest
    strategy:
      matrix:
        include: 
          - name: Linux Dockerfile
            file: ./images/linux.Dockerfile
            tag: linux
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          repository: blazium-engine/blazium
          ref: ${{ github.event.client_payload.branch }}
          fetch-depth: 1

      - name: Prepare Workspace
        run: |
          rm -rf godot
          mkdir godot
          cd godot
          tar xf /root/godot.tar.gz --strip-components=1

  classical-build:
    runs-on: ubuntu-latest
    container:
      image: bioblaze/blazium-linux:latest
    if: ${{ env.CLASSICAL == '1' }}
    steps:
      - name: Setup Path for X86_64
        run: export PATH="${{ env.GODOT_SDK_LINUX_X86_64 }}/bin:${{ env.BASE_PATH }}"

      - name: Build for Linux X86_64 Editor
        run: |
          scons -j${{ env.NUM_CORES }} platform=linuxbsd arch=x86_64 production=yes target=editor
          mkdir -p /root/out/x86_64/tools
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-tools
          path: /root/out/x86_64/tools

      - name: Build for Linux X86_64 Templates
        run: |
          scons -j${{ env.NUM_CORES }} platform=linuxbsd arch=x86_64 production=yes target=template_debug
          scons -j${{ env.NUM_CORES }} platform=linuxbsd arch=x86_64 production=yes target=template_release
          mkdir -p /root/out/x86_64/templates
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-templates
          path: /root/out/x86_64/templates

      - name: Repeat Builds for X86_32, ARM64, and ARM32
        run: |
          # X86_32
          export PATH="${{ env.GODOT_SDK_LINUX_X86_32 }}/bin:${{ env.BASE_PATH }}"
          scons -j${{ env.NUM_CORES }} platform=linuxbsd arch=x86_32 production=yes target=editor
          mkdir -p /root/out/x86_32/tools
        uses: actions/upload-artifact@v3
        with:
          name: x86_32-tools
          path: /root/out/x86_32/tools

      - name: Upload X86_32 Templates
        run: |
          scons platform=linuxbsd arch=x86_32 production=yes target=template_debug
          scons platform=linuxbsd arch=x86_32 production=yes target=template_release
          mkdir -p /root/out/x86_32/templates
        uses: actions/upload-artifact@v3
        with:
          name: x86_32-templates
          path: /root/out/x86_32/templates

      - name: Build ARM64 Tools and Templates
        run: |
          export PATH="${{ env.GODOT_SDK_LINUX_ARM64 }}/bin:${{ env.BASE_PATH }}"
          scons -j${{ env.NUM_CORES }} platform=linuxbsd arch=arm64 production=yes target=editor
          mkdir -p /root/out/arm64/tools
        uses: actions/upload-artifact@v3
        with:
          name: arm64-tools
          path: /root/out/arm64/tools

      - name: Upload ARM64 Templates
        run: |
          scons platform=linuxbsd arch=arm64 production=yes target=template_debug
          scons platform=linuxbsd arch=arm64 production=yes target=template_release
          mkdir -p /root/out/arm64/templates
        uses: actions/upload-artifact@v3
        with:
          name: arm64-templates
          path: /root/out/arm64/templates

      - name: Build ARM32 Tools and Templates
        run: |
          export PATH="${{ env.GODOT_SDK_LINUX_ARM32 }}/bin:${{ env.BASE_PATH }}"
          scons -j${{ env.NUM_CORES }} platform=linuxbsd arch=arm32 production=yes target=editor
          mkdir -p /root/out/arm32/tools
        uses: actions/upload-artifact@v3
        with:
          name: arm32-tools
          path: /root/out/arm32/tools

      - name: Upload ARM32 Templates
        run: |
          scons platform=linuxbsd arch=arm32 production=yes target=template_debug
          scons platform=linuxbsd arch=arm32 production=yes target=template_release
          mkdir -p /root/out/arm32/templates
        uses: actions/upload-artifact@v3
        with:
          name: arm32-templates
          path: /root/out/arm32/templates

  mono-build:
    runs-on: ubuntu-latest
    container:
      image: bioblaze/blazium-linux:latest
    if: ${{ env.MONO == '1' }}
    steps:
      - name: Setup Mono Glue
        run: |
          cp -r /root/mono-glue/GodotSharp/GodotSharp/Generated modules/mono/glue/GodotSharp/GodotSharp/
          cp -r /root/mono-glue/GodotSharp/GodotSharpEditor/Generated modules/mono/glue/GodotSharp/GodotSharpEditor/

      - name: Setup Path for Mono X86_64
        run: export PATH="${{ env.GODOT_SDK_LINUX_X86_64 }}/bin:${{ env.BASE_PATH }}"

      - name: Build Mono for Linux X86_64 Editor
        run: |
          scons -j${{ env.NUM_CORES }} platform=linuxbsd arch=x86_64 production=yes module_mono_enabled=yes target=editor
          ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd
          mkdir -p /root/out/x86_64/tools-mono
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-tools-mono
          path: /root/out/x86_64/tools-mono

      - name: Upload Mono X86_64 Templates
        run: |
          scons -j${{ env.NUM_CORES }} platform=linuxbsd arch=x86_64 production=yes module_mono_enabled=yes target=template_debug
          scons -j${{ env.NUM_CORES }} platform=linuxbsd arch=x86_64 production=yes module_mono_enabled=yes target=template_release
          mkdir -p /root/out/x86_64/templates-mono
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-templates-mono
          path: /root/out/x86_64/templates-mono

      - name: Repeat Mono Builds for X86_32, ARM64, and ARM32
        run: |
          # X86_32
          export PATH="${{ env.GODOT_SDK_LINUX_X86_32 }}/bin:${{ env.BASE_PATH }}"
          scons -j${{ env.NUM_CORES }} platform=linuxbsd arch=x86_32 production=yes module_mono_enabled=yes target=editor
          ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd
          mkdir -p /root/out/x86_32/tools-mono
        uses: actions/upload-artifact@v3
        with:
          name: x86_32-tools-mono
          path: /root/out/x86_32/tools-mono

      - name: Upload Mono X86_32 Templates
        run: |
          scons platform=linuxbsd arch=x86_32 production=yes module_mono_enabled=yes target=template_debug
          scons platform=linuxbsd arch=x86_32 production=yes module_mono_enabled=yes target=template_release
          mkdir -p /root/out/x86_32/templates-mono
        uses: actions/upload-artifact@v3
        with:
          name: x86_32-templates-mono
          path: /root/out/x86_32/templates-mono

      - name: Upload Mono ARM64 Tools and Templates
        run: |
          export PATH="${{ env.GODOT_SDK_LINUX_ARM64 }}/bin:${{ env.BASE_PATH }}"
          scons -j${{ env.NUM_CORES }} platform=linuxbsd arch=arm64 production=yes module_mono_enabled=yes target=editor
          ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd
          mkdir -p /root/out/arm64/tools-mono
        uses: actions/upload-artifact@v3
        with:
          name: arm64-tools-mono
          path: /root/out/arm64/tools-mono

      - name: Upload Mono ARM64 Templates
        run: |
          scons platform=linuxbsd arch=arm64 production=yes module_mono_enabled=yes target=template_debug
          scons platform=linuxbsd arch=arm64 production=yes module_mono_enabled=yes target=template_release
          mkdir -p /root/out/arm64/templates-mono
        uses: actions/upload-artifact@v3
        with:
          name: arm64-templates-mono
          path: /root/out/arm64/templates-mono

      - name: Upload Mono ARM32 Tools and Templates
        run: |
          export PATH="${{ env.GODOT_SDK_LINUX_ARM32 }}/bin:${{ env.BASE_PATH }}"
          scons -j${{ env.NUM_CORES }} platform=linuxbsd arch=arm32 production=yes module_mono_enabled=yes target=editor
          ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd
          mkdir -p /root/out/arm32/tools-mono
        uses: actions/upload-artifact@v3
        with:
          name: arm32-tools-mono
          path: /root/out/arm32/tools-mono

      - name: Upload Mono ARM32 Templates
        run: |
          scons platform=linuxbsd arch=arm32 production=yes module_mono_enabled=yes target=template_debug
          scons platform=linuxbsd arch=arm32 production=yes module_mono_enabled=yes target=template_release
          mkdir -p /root/out/arm32/templates-mono
        uses: actions/upload-artifact@v3
        with:
          name: arm32-templates-mono
          path: /root/out/arm32/templates-mono

  cleanup:
    runs-on: ubuntu-latest
    container:
      image: bioblaze/blazium-linux:latest
    steps:
      - name: Cleanup and Finalize
        run: echo "Linux build successful"
