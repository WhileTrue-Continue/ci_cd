name: Linux Builder

on:
  repository_dispatch:
    types: [deploy_linux]
  workflow_call:
    inputs:
      MONO:
        description: 'Is this a Mono Workflow?'
        required: true
        type: number
        default: 0

env:
  GODOT_SDK_LINUX_X86_64: /root/x86_64-godot-linux-gnu_sdk-buildroot
  GODOT_SDK_LINUX_ARM64: /root/aarch64-godot-linux-gnu_sdk-buildroot
  SCONSFLAGS: verbose=yes warnings=no progress=no
  TERM: xterm
  PLATFORM: linuxbsd
  MONO: ${{ inputs.MONO }}

jobs:
  setup-and-build:
    runs-on: ubuntu-latest
    container:
      image: bioblaze/blazium-linux64:latest
    strategy:
      matrix:
        include: 
          - name: Linux X86_64
            path: /root/x86_64-godot-linux-gnu_sdk-buildroot
            type: x86_64
          - name: Linux ARM64
            path: /root/aarch64-godot-linux-gnu_sdk-buildroot
            type: arm64
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          repository: blazium-engine/blazium
          ref: ${{ github.event.client_payload.branch }}
          fetch-depth: 1

      - name: Get BASE_PATH
        id: pathing
        run: |
          echo "BASE_PATH=$PATH" >> "$GITHUB_OUTPUT"

      - name: Setup Artifact Naming Scheme
        id: naming
        run: |
          if [ "$MONO" -eq 1 ]; then
            echo "BASE_NAME=$PLATFORM-${{ matrix.type }}-mono" >> "$GITHUB_OUTPUT"
            echo "STEP_NAME=${{ matrix.name }}/w Mono" >> "$GITHUB_OUTPUT"
          else
            echo "BASE_NAME=$PLATFORM-${{ matrix.type }}" >> "$GITHUB_OUTPUT"
            echo "STEP_NAME=${{ matrix.name }}" >> "$GITHUB_OUTPUT"

      - name: Download Mono Glue
        if: ${{ inputs.MONO == 1 }}
        uses: actions/download-artifact@v3
        with:
          name: mono-glue
          path: /root/mono-glue

      - name: Setup Mono Glue
        if: ${{ inputs.MONO == 1 }}
        run: |
          echo "::group::Setting up Mono Glue"
          cp -r /root/mono-glue/GodotSharp/GodotSharp/Generated modules/mono/glue/GodotSharp/GodotSharp/
          cp -r /root/mono-glue/GodotSharp/GodotSharpEditor/Generated modules/mono/glue/GodotSharp/GodotSharpEditor/
          echo "::endgroup::"

      - name: Setup Path for ${{ steps.naming.outputs.STEP_NAME }}
        run: |
          echo "${{ matrix.path }}/bin" >> "$GITHUB_PATH"
          echo "::notice::Path for ${{ steps.naming.outputs.STEP_NAME }} set up successfully"

      - name: Build for ${{ steps.naming.outputs.STEP_NAME }} Editor
        id: build_editor
        run: |
          echo "::group::Building Editor for ${{ steps.naming.outputs.STEP_NAME }}"
          if [ "$MONO" -eq 1 ]; then
            scons platform=$PLATFORM arch=${{ matrix.type }} production=yes module_mono_enabled=yes target=editor
            ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=$PLATFORM
          else
            scons platform=$PLATFORM arch=${{ matrix.type }} production=yes target=editor
          fi
          echo "::endgroup::"
        continue-on-error: true

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.naming.outputs.BASE_NAME }}-tools
          path: ./bin

      - name: Cleaning Bin for ${{ steps.naming.outputs.STEP_NAME }}
        run: |
          echo "::debug::Cleaning up bin directory for ${{ steps.naming.outputs.STEP_NAME }}"
          rm -rf bin

      - name: Build for ${{ steps.naming.outputs.STEP_NAME }} Templates
        id: build_templates
        run: |
          echo "::group::Building Templates for ${{ steps.naming.outputs.STEP_NAME }}"
          if [ "$MONO" -eq 1 ]; then
            scons platform=$PLATFORM arch=${{ matrix.type }} production=yes module_mono_enabled=yes target=template_debug
            scons platform=$PLATFORM arch=${{ matrix.type }} production=yes module_mono_enabled=yes target=template_release
          else
            scons platform=$PLATFORM arch=${{ matrix.type }} production=yes target=template_debug
            scons platform=$PLATFORM arch=${{ matrix.type }} production=yes target=template_release
          fi
          echo "::endgroup::"
        continue-on-error: true

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.naming.outputs.BASE_NAME }}-templates
          path: ./bin

      - name: Cleaning Bin for ${{ steps.naming.outputs.STEP_NAME }} Templates
        run: |
          echo "::debug::Cleaning up bin directory for ${{ steps.naming.outputs.STEP_NAME }} Templates"
          rm -rf bin

      - name: Final Summary
        run: |
          echo "::group::Final Summary"
          echo "Build Summary for Workflow Run: ${{ github.run_id }}"
          echo "Builds completed for the following configurations:"
          echo "- Platform: ${{ matrix.name }}"
          echo "- Build Path: ${{ matrix.path }}"
          echo "::notice::Artifacts have been uploaded for ${{ steps.naming.outputs.STEP_NAME }}"
          
          # Calculate duration of each build
          start_time=${{ steps.build_editor.started_at }}
          end_time=${{ steps.build_templates.completed_at }}
          total_duration=$(( $(date -d "$end_time" +%s) - $(date -d "$start_time" +%s) ))

          echo "Total Build Time: $total_duration seconds"
          
          echo "::notice::Links to Builds:"
          echo "[Editor Build Link](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          echo "[Template Build Link](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          echo "::endgroup::"