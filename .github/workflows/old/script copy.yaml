name: Linux Builder

on:
  repository_dispatch:
    types: [deploy_linux]
  workflow_call:

env:
  GODOT_SDK_LINUX_X86_64: /root/x86_64-godot-linux-gnu_sdk-buildroot
  GODOT_SDK_LINUX_X86_32: /root/i686-godot-linux-gnu_sdk-buildroot
  GODOT_SDK_LINUX_ARM64: /root/aarch64-godot-linux-gnu_sdk-buildroot
  GODOT_SDK_LINUX_ARM32: /root/arm-godot-linux-gnueabihf_sdk-buildroot
  SCONSFLAGS: verbose=yes warnings=no progress=no
  BASE_PATH: $PATH
  TERM: xterm
  PLATFORM: linuxbsd

jobs:
  setup-and-build:
    runs-on: ubuntu-latest
    container:
      image: bioblaze/blazium-linux:latest
    strategy:
      matrix:
        include: 
          - name: Linux X86_64
            path: ${{ env.GODOT_SDK_LINUX_X86_64 }}
            type: x86_64
          - name: Linux X86_32
            path: ${{ env.GODOT_SDK_LINUX_X86_32 }}
            type: x86_32
          - name: Linux ARM64
            path: ${{ env.GODOT_SDK_LINUX_ARM64 }}
            type: arm64
          - name: Linux ARM32
            path: ${{ env.GODOT_SDK_LINUX_ARM32 }}
            type: arm32
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          repository: blazium-engine/blazium
          ref: ${{ github.event.client_payload.branch }}
          fetch-depth: 1

      - name: Setup Artifact Naming Scheme
        id: naming
        run: |
          if [ "${MONO}" == "1" ]; then
            echo "BASE_NAME=${{ env.PLATFORM }}-${{ matrix.type }}-mono" >> "$GITHUB_OUTPUT"
            echo "STEP_NAME=${{ matrix.name }}/w Mono" >> "$GITHUB_OUTPUT"
          else
            echo "BASE_NAME=${{ env.PLATFORM }}-${{ matrix.type }}" >> "$GITHUB_OUTPUT"
            echo "STEP_NAME=${{ matrix.name }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Download Mono Glue
        if: ${{ env.MONO == '1' }}
        uses: actions/download-artifact@v3
        with:
          name: mono-glue
          path: /root/mono-glue

      - name: Setup Mono Glue
        if: ${{ env.MONO == '1' }}
        run: |
          cp -r /root/mono-glue/GodotSharp/GodotSharp/Generated modules/mono/glue/GodotSharp/GodotSharp/
          cp -r /root/mono-glue/GodotSharp/GodotSharpEditor/Generated modules/mono/glue/GodotSharp/GodotSharpEditor/

      - name: Setup Path for ${{ steps.naming.outputs.STEP_NAME }}
        run: |
          export PATH="${{ matrix.path }}/bin:${{ env.BASE_PATH }}"

      - name: Build for ${{ steps.naming.outputs.STEP_NAME }} Editor
        run: |
          if [ "${MONO}" == "1" ]; then
            scons platform=${{ env.PLATFORM }} arch=${{ matrix.type }} production=yes module_mono_enabled=yes target=editor
            ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=${{ env.PLATFORM }}
          else
            scons platform=${{ env.PLATFORM }} arch=${{ matrix.type }} production=yes target=editor
          fi

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.naming.outputs.BASE_NAME }}-tools
          path: ./bin

      - name: Cleaning Bin for ${{ steps.naming.outputs.STEP_NAME }}
        run: |
          rm -rf bin

      - name: Build for ${{ steps.naming.outputs.STEP_NAME }} Templates
        run: |
          if [ "${MONO}" == "1" ]; then
            scons platform=${{ env.PLATFORM }} arch=${{ matrix.type }} production=yes module_mono_enabled=yes target=template_debug
            scons platform=${{ env.PLATFORM }} arch=${{ matrix.type }} production=yes module_mono_enabled=yes target=template_release
          else
            scons platform=${{ env.PLATFORM }} arch=${{ matrix.type }} production=yes target=template_debug
            scons platform=${{ env.PLATFORM }} arch=${{ matrix.type }} production=yes target=template_release
          fi

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.naming.outputs.BASE_NAME }}-templates
          path: ./bin

      - name: Cleaning Bin for ${{ steps.naming.outputs.STEP_NAME }} Templates
        run: rm -rf bin
